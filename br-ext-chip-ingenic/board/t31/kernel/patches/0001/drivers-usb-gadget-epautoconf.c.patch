
--- a/drivers/usb/gadget/epautoconf.c
+++ b/drivers/usb/gadget/epautoconf.c
@@ -129,7 +129,7 @@ ep_matches (
 	 * and wants to know the maximum possible, provide the info.
 	 */
 	if (desc->wMaxPacketSize == 0)
-		desc->wMaxPacketSize = cpu_to_le16(ep->maxpacket);
+		desc->wMaxPacketSize = cpu_to_le16(ep->maxpacket_limit);
 
 	/* endpoint maxpacket size is an input parameter, except for bulk
 	 * where it's an output parameter representing the full speed limit.
@@ -145,7 +145,7 @@ ep_matches (
 
 	case USB_ENDPOINT_XFER_ISOC:
 		/* ISO:  limit 1023 bytes full speed, 1024 high/super speed */
-		if (ep->maxpacket < max)
+		if ((ep->maxpacket_limit & 0x7ff) < max)
 			return 0;
 		if (!gadget_is_dualspeed(gadget) && max > 1023)
 			return 0;
@@ -157,6 +157,8 @@ ep_matches (
 			/* configure your hardware with enough buffering!! */
 		}
 		break;
+	default:
+		desc->wMaxPacketSize &= ~cpu_to_le16((3 << 11));
 	}
 
 	/* MATCH!! */
@@ -176,10 +178,9 @@ ep_matches (
 		desc->bEndpointAddress |= gadget->out_epnum;
 	}
 
-	/* report (variable) full speed bulk maxpacket */
+	/* report (variable) full speed bulk maxpacket_limit */
 	if ((USB_ENDPOINT_XFER_BULK == type) && !ep_comp) {
-		int size = ep->maxpacket;
-
+		int size = ep->maxpacket_limit & 0x7ff;
 		/* min() doesn't work on bitfields with gcc-3.5 */
 		if (size > 64)
 			size = 64;
@@ -301,6 +302,18 @@ struct usb_ep *usb_ep_autoconfig_ss(
 		if (ep && ep_matches(gadget, ep, desc, ep_comp))
 			goto found_ep;
 #endif
+	} else if (gadget_is_dwc2(gadget) && (USB_ENDPOINT_XFER_ISOC == type)) {
+		if ((USB_DIR_IN & desc->bEndpointAddress) &&
+				((usb_endpoint_maxp(desc) >> 11) & 0x3) > 0) {
+			list_for_each_entry_reverse(ep, &gadget->ep_list, ep_list) {
+				if (ep_matches(gadget, ep, desc, ep_comp)) {
+					if (!(cpu_to_le16(ep->maxpacket_limit) & (0x3 << 11)))
+						desc->wMaxPacketSize &= ~(0x3 << 11);
+					goto found_ep;
+				}
+			}
+			return NULL;
+		}
 	}
 
 	/* Second, look at endpoints until an unclaimed one looks usable */
